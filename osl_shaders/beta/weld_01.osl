float rand(float n){
    return sin(n) * 43758.5453123 - floor(sin(n) * 43758.5453123);
}

shader weld(
    float radius = 0.1,
    float disp_height = 1.0,
    vector distort = vector(0),
    float burn_radius = 1.0,

    output vector disp_rand_burn = vector(0)
)
{
    float x[63] = {-2.9594118652905284, -3.06659561162177, -3.111245635732151, -3.1173295968071453, -3.1050986451205116, -3.0859546982716526, -3.063474038757438, -3.0385908555401135, -3.015196974384542, -2.993531809868379, -2.9727787328604296, -2.9530577806178235, -2.93567014712943, -2.9214029610795857, -2.9106195235692796, -2.9035153644679452, -2.900758127419323, -2.9027009915787576, -2.9089601831861867, -2.9188107697622225, -2.9318145121955133, -2.9473946179507315, -2.965156209462176, -2.984353551890091, -3.0050064797872977, -3.028167584295044, -3.0546114528062343, -3.079672314989936, -3.101178333784778, -3.115825526294749, -3.1118469283879593, -3.066615441452037, -2.959063326683403, -2.8394350212516506, -2.715187900834451, -2.5913130963242508, -2.4685810041569898, -2.3507086894135374, -2.2375538782221347, -2.1282960859750606, -2.025346408406013, -1.9320559747894825, -1.8505739945542088, -1.7830103047735817, -1.7315726048487357, -1.6986613569299118, -1.6870988644668388, -1.6983242167481944, -1.731005801413018, -1.7823652849311664, -1.8500999387880206, -1.931954542836634, -2.0255185894827674, -2.128534078877159, -2.237756869865205, -2.350823771435911, -2.4684334754178563, -2.5911537478147486, -2.7151141807095787, -2.8395819720573194, -2.8395819720573194, -2.8395819720573194, -2.8395819720573194};
    float y[63] = {-0.09716461424764485, -0.10293167928383322, -0.09716452436805992, -0.0856351339667881, -0.06946985096774198, -0.04904160445873779, -0.018874891833365926, 0.026691598405791203, 0.08271590975770608, 0.14608690528954704, 0.21947719875312396, 0.3051198070555168, 0.402136514386926, 0.5094200656765558, 0.6253526978628826, 0.7479529231060187, 0.8744506820718716, 1.0009561110610528, 1.1235655262691138, 1.2394794372857263, 1.3466413318186676, 1.4433484050598462, 1.5287835828365577, 1.6022761277153326, 1.6659491996082803, 1.7224915538110945, 1.7696827454683721, 1.801137039507999, 1.8222006732115836, 1.8387136178972041, 1.8505444472122936, 1.85627303066601, 1.8503455722341462, 1.8387378227589581, 1.8225201373553692, 1.8019754104541827, 1.7714505118443467, 1.7252602888220843, 1.6689724621357762, 1.6054601675352107, 1.5319757648001964, 1.4462944637632917, 1.3493026761543505, 1.2420411482313065, 1.126134086381827, 1.0035537717339533, 0.8770678677492209, 0.7505494857721787, 0.627896998502999, 0.5119491670495003, 0.4047947428852657, 0.3081718770589287, 0.22290082920235235, 0.1496435023119004, 0.08617823199533052, 0.029750156006267854, -0.017167389252699738, -0.04827232713729237, -0.06909935406667501, -0.08547358070289442, -0.08547358070289442, -0.08547358070289442, -0.08547358070289442};
    float z[63] = {-0.013164922069520552, 0.06254023910195622, 0.1858272159554273, 0.3113553702090737, 0.43684098354365375, 0.560007516723617, 0.6811284198923229, 0.7967188648673758, 0.9077712211955519, 1.015216847542288, 1.1163774380857283, 1.2077714194591775, 1.2874971863825857, 1.3536320168541365, 1.4039834598605498, 1.4361117562901853, 1.4472627881162377, 1.4360321962697682, 1.4037411113205411, 1.3531546954138434, 1.2865373148956123, 1.2060664661955758, 1.1140942053185403, 1.012717330104907, 0.9052463932254309, 0.7944248315609028, 0.6798496499001452, 0.5595478419129031, 0.4368577677120907, 0.3117062668343374, 0.18600959352657007, 0.06269831892744178, -0.01218723083448602, -0.05068432733056008, -0.071939878539517, -0.08575676773763904, -0.09537838954331006, -0.1009199583346225, -0.10752827587534108, -0.11524683220750419, -0.12236590422444149, -0.12799198289573802, -0.1328198411889716, -0.13700651016665413, -0.14035636582731806, -0.1424480512906083, -0.14324245698436386, -0.14271411345758003, -0.1407894421827037, -0.1374192147379727, -0.13277368371519607, -0.12683423762493526, -0.1198393595680353, -0.11157583983845774, -0.10305502565070686, -0.09619058317211354, -0.09157136026034209, -0.08353654218310248, -0.07107300356155623, -0.051109247829072724, -0.051109247829072724, -0.051109247829072724, -0.051109247829072724};
    float distances[63];
    int min_dist_cv = 0;

    vector shading_pos = P;
    float min_dist = 9999999999.0;
    string input_tex = "C:/ZENO_2019/projects/shaders_xyz/challenge_10_weld/src/weld_05.tiff";

    for (int i = 0; i < 62; i++){
        point pos = point(x[i], y[i], z[i]);
        pos += distort;

        // find distance between two points
        float distance = sqrt((P[0] - pos[0])*(P[0] - pos[0]) +
                              (P[1] - pos[1])*(P[1] - pos[1]) +
                              (P[2] - pos[2])*(P[2] - pos[2]) );

        distances[i] = distance;

        if (distance < min_dist){
            min_dist = distance;
            min_dist_cv = i;
        }
    }

    if (distances[min_dist_cv] < burn_radius){
        disp_rand_burn[2] = 1.0 - (distances[min_dist_cv] / burn_radius);
    }

    // int seed = 8;

    if ((min_dist < radius)){
        float min_dist_norm = min_dist/radius;
        float disp_lookup = texture(input_tex, min_dist_norm, 0.0);
        disp_rand_burn[0] += disp_lookup;
        disp_rand_burn[1] = rand(min_dist_cv/float(62));

        if (min_dist_cv < 62 && (distances[min_dist_cv+1] < radius)){
            float min_dist_1_norm = distances[min_dist_cv+1]/radius;
            float disp_lookup = texture(input_tex, min_dist_1_norm, 0.0);
            disp_rand_burn[0] += disp_lookup;
        }

        if (min_dist_cv > 0 && (distances[min_dist_cv-1] < radius)){
            float min_dist_2_norm = distances[min_dist_cv-1]/radius;
            float disp_lookup = texture(input_tex, min_dist_2_norm, 0.0);
            disp_rand_burn[0] += disp_lookup;
        }
    }

    disp_rand_burn[0] = (disp_rand_burn[0]/2.0) * disp_height;

}
